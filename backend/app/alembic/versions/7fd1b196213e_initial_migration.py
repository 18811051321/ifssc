"""Initial migration

Revision ID: 7fd1b196213e
Revises: 
Create Date: 2024-10-23 17:54:34.693255

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = '7fd1b196213e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_business',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('registration_date', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_business_email'), 'user_business', ['email'], unique=True)
    op.create_index(op.f('ix_user_business_id'), 'user_business', ['id'], unique=False)
    op.create_index(op.f('ix_user_business_phone_number'), 'user_business', ['phone_number'], unique=True)
    op.create_table('user_public',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('date_of_birth', sa.DateTime(), nullable=True),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('registration_date', sa.DateTime(), nullable=False),
    sa.Column('profile_picture', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('preferences', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_public_email'), 'user_public', ['email'], unique=True)
    op.create_index(op.f('ix_user_public_id'), 'user_public', ['id'], unique=False)
    op.create_index(op.f('ix_user_public_phone_number'), 'user_public', ['phone_number'], unique=True)
    op.create_table('venue',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('google_rating', sa.Float(), nullable=True),
    sa.Column('instagram_handle', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('instagram_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('google_map_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('mobile_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('opening_time', sa.Time(), nullable=True),
    sa.Column('closing_time', sa.Time(), nullable=True),
    sa.Column('avg_expense_for_two', sa.Float(), nullable=True),
    sa.Column('zomato_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('swiggy_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_venue_id'), 'venue', ['id'], unique=False)
    op.create_index(op.f('ix_venue_name'), 'venue', ['name'], unique=False)
    op.create_table('foodcourt',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('total_qsrs', sa.Integer(), nullable=True),
    sa.Column('seating_capacity', sa.Integer(), nullable=True),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_foodcourt_id'), 'foodcourt', ['id'], unique=False)
    op.create_index(op.f('ix_foodcourt_venue_id'), 'foodcourt', ['venue_id'], unique=False)
    op.create_table('menu',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('menu_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_menu_id'), 'menu', ['id'], unique=False)
    op.create_table('nightclub',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nightclub_id'), 'nightclub', ['id'], unique=False)
    op.create_index(op.f('ix_nightclub_venue_id'), 'nightclub', ['venue_id'], unique=False)
    op.create_table('payment_source_nightclub',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gateway_transaction_id', sa.Uuid(), nullable=True),
    sa.Column('payment_time', sa.DateTime(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('last_attempt_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_source_nightclub_id'), 'payment_source_nightclub', ['id'], unique=False)
    op.create_table('payment_source_qsr',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gateway_transaction_id', sa.Uuid(), nullable=True),
    sa.Column('payment_time', sa.DateTime(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('last_attempt_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_source_qsr_id'), 'payment_source_qsr', ['id'], unique=False)
    op.create_table('payment_source_restaurant',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gateway_transaction_id', sa.Uuid(), nullable=True),
    sa.Column('payment_time', sa.DateTime(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('last_attempt_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_source_restaurant_id'), 'payment_source_restaurant', ['id'], unique=False)
    op.create_table('pickup_location',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pickup_location_id'), 'pickup_location', ['id'], unique=False)
    op.create_table('restaurant',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.Column('cuisine_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_restaurant_id'), 'restaurant', ['id'], unique=False)
    op.create_index(op.f('ix_restaurant_venue_id'), 'restaurant', ['venue_id'], unique=False)
    op.create_table('user_venue_association',
    sa.Column('user_business_id', sa.Uuid(), nullable=False),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_business_id'], ['user_business.id'], ),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], ),
    sa.PrimaryKeyConstraint('user_business_id', 'venue_id')
    )
    op.create_table('event',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('nightclub_id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('age_restriction', sa.Integer(), nullable=True),
    sa.Column('dress_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['nightclub_id'], ['nightclub.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_event_id'), 'event', ['id'], unique=False)
    op.create_table('group',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('nightclub_id', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('admin_user_id', sa.Uuid(), nullable=False),
    sa.Column('table_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['admin_user_id'], ['user_public.id'], ),
    sa.ForeignKeyConstraint(['nightclub_id'], ['nightclub.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_group_id'), 'group', ['id'], unique=False)
    op.create_table('menu_category',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('menu_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['menu_id'], ['menu.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_menu_category_id'), 'menu_category', ['id'], unique=False)
    op.create_table('nightclub_order',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('order_time', sa.DateTime(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('taxes_and_charges', sa.Float(), nullable=True),
    sa.Column('cover_charge_used', sa.Float(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('service_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('venue_id', sa.Uuid(), nullable=True),
    sa.Column('payment_id', sa.Uuid(), nullable=True),
    sa.Column('pickup_location_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payment_source_nightclub.id'], ),
    sa.ForeignKeyConstraint(['pickup_location_id'], ['pickup_location.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.ForeignKeyConstraint(['venue_id'], ['nightclub.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nightclub_order_id'), 'nightclub_order', ['id'], unique=False)
    op.create_table('qsr',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('foodcourt_id', sa.Uuid(), nullable=True),
    sa.Column('drive_thru', sa.Boolean(), nullable=True),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['foodcourt_id'], ['foodcourt.id'], ),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_qsr_foodcourt_id'), 'qsr', ['foodcourt_id'], unique=False)
    op.create_index(op.f('ix_qsr_id'), 'qsr', ['id'], unique=False)
    op.create_index(op.f('ix_qsr_venue_id'), 'qsr', ['venue_id'], unique=False)
    op.create_table('restaurant_order',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('pickup_location_id', sa.Uuid(), nullable=True),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('order_time', sa.DateTime(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('taxes_and_charges', sa.Float(), nullable=True),
    sa.Column('cover_charge_used', sa.Float(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('service_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('venue_id', sa.Uuid(), nullable=True),
    sa.Column('payment_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payment_source_restaurant.id'], ),
    sa.ForeignKeyConstraint(['pickup_location_id'], ['pickup_location.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.ForeignKeyConstraint(['venue_id'], ['restaurant.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_restaurant_order_id'), 'restaurant_order', ['id'], unique=False)
    op.create_table('clubvisit',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('group_id', sa.Uuid(), nullable=True),
    sa.Column('nightclub_id', sa.Uuid(), nullable=False),
    sa.Column('entry_time', sa.DateTime(), nullable=False),
    sa.Column('exit_time', sa.DateTime(), nullable=True),
    sa.Column('cover_charge', sa.Float(), nullable=True),
    sa.Column('total_bill', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['nightclub_id'], ['nightclub.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_booking',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('booking_time', sa.DateTime(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_nightclub_order_link',
    sa.Column('group_id', sa.Uuid(), nullable=False),
    sa.Column('nightclub_order_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['nightclub_order_id'], ['nightclub_order.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'nightclub_order_id')
    )
    op.create_table('group_wallet',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('group_id', sa.Uuid(), nullable=False),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_id')
    )
    op.create_index(op.f('ix_group_wallet_id'), 'group_wallet', ['id'], unique=False)
    op.create_table('groupmembers',
    sa.Column('group_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'user_id')
    )
    op.create_table('menu_sub_category',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['menu_category.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_menu_sub_category_id'), 'menu_sub_category', ['id'], unique=False)
    op.create_table('qsr_order',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('pickup_location_id', sa.Uuid(), nullable=True),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('order_time', sa.DateTime(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('taxes_and_charges', sa.Float(), nullable=True),
    sa.Column('cover_charge_used', sa.Float(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('service_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('venue_id', sa.Uuid(), nullable=False),
    sa.Column('payment_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['payment_id'], ['payment_source_qsr.id'], ),
    sa.ForeignKeyConstraint(['pickup_location_id'], ['pickup_location.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.ForeignKeyConstraint(['venue_id'], ['qsr.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_qsr_order_id'), 'qsr_order', ['id'], unique=False)
    op.create_table('event_offering',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('event_booking_id', sa.Uuid(), nullable=False),
    sa.Column('offering_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('total_guests_per_pass', sa.Integer(), nullable=False),
    sa.Column('cover_charge', sa.Float(), nullable=True),
    sa.Column('additional_charges', sa.Float(), nullable=True),
    sa.Column('availability', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_booking_id'], ['event_booking.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_event_offering_id'), 'event_offering', ['id'], unique=False)
    op.create_table('groupwallettopup',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('group_wallet_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('topup_time', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['group_wallet_id'], ['group_wallet.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_groupwallettopup_id'), 'groupwallettopup', ['id'], unique=False)
    op.create_table('menu_item',
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.Column('sub_category_id', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_veg', sa.Boolean(), nullable=True),
    sa.Column('ingredients', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('abv', sa.Float(), nullable=True),
    sa.Column('ibu', sa.Integer(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['menu_category.id'], ),
    sa.ForeignKeyConstraint(['sub_category_id'], ['menu_sub_category.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_menu_item_id'), 'menu_item', ['id'], unique=False)
    op.create_table('payment_event',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gateway_transaction_id', sa.Uuid(), nullable=True),
    sa.Column('payment_time', sa.DateTime(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('event_booking_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['event_booking_id'], ['event_booking.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_public.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_event_id'), 'payment_event', ['id'], unique=False)
    op.create_table('orderitem',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('nightclub_order_id', sa.Uuid(), nullable=True),
    sa.Column('restaurant_order_id', sa.Uuid(), nullable=True),
    sa.Column('qsr_order_id', sa.Uuid(), nullable=True),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['menu_item.id'], ),
    sa.ForeignKeyConstraint(['nightclub_order_id'], ['nightclub_order.id'], ),
    sa.ForeignKeyConstraint(['qsr_order_id'], ['qsr_order.id'], ),
    sa.ForeignKeyConstraint(['restaurant_order_id'], ['restaurant_order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orderitem_id'), 'orderitem', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_orderitem_id'), table_name='orderitem')
    op.drop_table('orderitem')
    op.drop_index(op.f('ix_payment_event_id'), table_name='payment_event')
    op.drop_table('payment_event')
    op.drop_index(op.f('ix_menu_item_id'), table_name='menu_item')
    op.drop_table('menu_item')
    op.drop_index(op.f('ix_groupwallettopup_id'), table_name='groupwallettopup')
    op.drop_table('groupwallettopup')
    op.drop_index(op.f('ix_event_offering_id'), table_name='event_offering')
    op.drop_table('event_offering')
    op.drop_index(op.f('ix_qsr_order_id'), table_name='qsr_order')
    op.drop_table('qsr_order')
    op.drop_index(op.f('ix_menu_sub_category_id'), table_name='menu_sub_category')
    op.drop_table('menu_sub_category')
    op.drop_table('groupmembers')
    op.drop_index(op.f('ix_group_wallet_id'), table_name='group_wallet')
    op.drop_table('group_wallet')
    op.drop_table('group_nightclub_order_link')
    op.drop_table('event_booking')
    op.drop_table('clubvisit')
    op.drop_index(op.f('ix_restaurant_order_id'), table_name='restaurant_order')
    op.drop_table('restaurant_order')
    op.drop_index(op.f('ix_qsr_venue_id'), table_name='qsr')
    op.drop_index(op.f('ix_qsr_id'), table_name='qsr')
    op.drop_index(op.f('ix_qsr_foodcourt_id'), table_name='qsr')
    op.drop_table('qsr')
    op.drop_index(op.f('ix_nightclub_order_id'), table_name='nightclub_order')
    op.drop_table('nightclub_order')
    op.drop_index(op.f('ix_menu_category_id'), table_name='menu_category')
    op.drop_table('menu_category')
    op.drop_index(op.f('ix_group_id'), table_name='group')
    op.drop_table('group')
    op.drop_index(op.f('ix_event_id'), table_name='event')
    op.drop_table('event')
    op.drop_table('user_venue_association')
    op.drop_index(op.f('ix_restaurant_venue_id'), table_name='restaurant')
    op.drop_index(op.f('ix_restaurant_id'), table_name='restaurant')
    op.drop_table('restaurant')
    op.drop_index(op.f('ix_pickup_location_id'), table_name='pickup_location')
    op.drop_table('pickup_location')
    op.drop_index(op.f('ix_payment_source_restaurant_id'), table_name='payment_source_restaurant')
    op.drop_table('payment_source_restaurant')
    op.drop_index(op.f('ix_payment_source_qsr_id'), table_name='payment_source_qsr')
    op.drop_table('payment_source_qsr')
    op.drop_index(op.f('ix_payment_source_nightclub_id'), table_name='payment_source_nightclub')
    op.drop_table('payment_source_nightclub')
    op.drop_index(op.f('ix_nightclub_venue_id'), table_name='nightclub')
    op.drop_index(op.f('ix_nightclub_id'), table_name='nightclub')
    op.drop_table('nightclub')
    op.drop_index(op.f('ix_menu_id'), table_name='menu')
    op.drop_table('menu')
    op.drop_index(op.f('ix_foodcourt_venue_id'), table_name='foodcourt')
    op.drop_index(op.f('ix_foodcourt_id'), table_name='foodcourt')
    op.drop_table('foodcourt')
    op.drop_index(op.f('ix_venue_name'), table_name='venue')
    op.drop_index(op.f('ix_venue_id'), table_name='venue')
    op.drop_table('venue')
    op.drop_index(op.f('ix_user_public_phone_number'), table_name='user_public')
    op.drop_index(op.f('ix_user_public_id'), table_name='user_public')
    op.drop_index(op.f('ix_user_public_email'), table_name='user_public')
    op.drop_table('user_public')
    op.drop_index(op.f('ix_user_business_phone_number'), table_name='user_business')
    op.drop_index(op.f('ix_user_business_id'), table_name='user_business')
    op.drop_index(op.f('ix_user_business_email'), table_name='user_business')
    op.drop_table('user_business')
    # ### end Alembic commands ###
